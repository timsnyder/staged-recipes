{% set name = "perl-ppix-regexp" %}
{% set version = "0.065" %}
{% set sha256 = "eb4a56858c077d9e6a859c4f29d7659ed40ea588d21cfe7193dd91143a8e843e" %}

package:
  name: {{ name }}
  version: {{ version }}

source:
  fn: PPIx-Regexp-0.065.tar.gz
  url: https://cpan.metacpan.org/authors/id/W/WY/WYANT/PPIx-Regexp-0.065.tar.gz
  sha256: {{ sha256 }}

# If this is a new build for the same version, increment the build
# number. If you do not include this key, it defaults to 0.
build:
  number: 0

requirements:
  host:
    - perl
    - perl-list-moreutils
    - perl-task-weaken
    - perl-ppi
    #- perl-base
    #- perl-strict
    #- perl-list-util
    #- perl-test-more
    #- perl-scalar-util
    #- perl-module-build
    #- perl-carp
    #- perl-warnings
    #- perl-constant
    #- perl-exporter

  run:
    - perl
    - perl-list-moreutils
    - perl-task-weaken
    - perl-ppi
    #- perl-constant
    #- perl-base
    #- perl-carp
    #- perl-scalar-util
    #- perl-exporter
    #- perl-strict
    #- perl-warnings
    #- perl-list-util

test:
  # Perl 'use' tests
  imports:
    - PPIx::Regexp
    - PPIx::Regexp::Constant
    - PPIx::Regexp::Dumper
    - PPIx::Regexp::Element
    - PPIx::Regexp::Lexer
    - PPIx::Regexp::Node
    - PPIx::Regexp::Node::Range
    - PPIx::Regexp::Node::Unknown
    - PPIx::Regexp::StringTokenizer
    - PPIx::Regexp::Structure
    - PPIx::Regexp::Structure::Assertion
    - PPIx::Regexp::Structure::BranchReset
    - PPIx::Regexp::Structure::Capture
    - PPIx::Regexp::Structure::CharClass
    - PPIx::Regexp::Structure::Code
    - PPIx::Regexp::Structure::Main
    - PPIx::Regexp::Structure::Modifier
    - PPIx::Regexp::Structure::NamedCapture
    - PPIx::Regexp::Structure::Quantifier
    - PPIx::Regexp::Structure::RegexSet
    - PPIx::Regexp::Structure::Regexp
    - PPIx::Regexp::Structure::Replacement
    - PPIx::Regexp::Structure::Subexpression
    - PPIx::Regexp::Structure::Switch
    - PPIx::Regexp::Structure::Unknown
    - PPIx::Regexp::Support
    - PPIx::Regexp::Token
    - PPIx::Regexp::Token::Assertion
    - PPIx::Regexp::Token::Backreference
    - PPIx::Regexp::Token::Backtrack
    - PPIx::Regexp::Token::CharClass
    - PPIx::Regexp::Token::CharClass::POSIX
    - PPIx::Regexp::Token::CharClass::POSIX::Unknown
    - PPIx::Regexp::Token::CharClass::Simple
    - PPIx::Regexp::Token::Code
    - PPIx::Regexp::Token::Comment
    - PPIx::Regexp::Token::Condition
    - PPIx::Regexp::Token::Control
    - PPIx::Regexp::Token::Delimiter
    - PPIx::Regexp::Token::Greediness
    - PPIx::Regexp::Token::GroupType
    - PPIx::Regexp::Token::GroupType::Assertion
    - PPIx::Regexp::Token::GroupType::BranchReset
    - PPIx::Regexp::Token::GroupType::Code
    - PPIx::Regexp::Token::GroupType::Modifier
    - PPIx::Regexp::Token::GroupType::NamedCapture
    - PPIx::Regexp::Token::GroupType::Subexpression
    - PPIx::Regexp::Token::GroupType::Switch
    - PPIx::Regexp::Token::Interpolation
    - PPIx::Regexp::Token::Literal
    - PPIx::Regexp::Token::Modifier
    - PPIx::Regexp::Token::NoOp
    - PPIx::Regexp::Token::Operator
    - PPIx::Regexp::Token::Quantifier
    - PPIx::Regexp::Token::Recursion
    - PPIx::Regexp::Token::Reference
    - PPIx::Regexp::Token::Structure
    - PPIx::Regexp::Token::Unknown
    - PPIx::Regexp::Token::Unmatched
    - PPIx::Regexp::Token::Whitespace
    - PPIx::Regexp::Tokenizer
    - PPIx::Regexp::Util

  # You can also put a file called run_test.pl (or run_test.py) in the recipe
  # that will be run at test time.

about:
  home: http://metacpan.org/pod/PPIx::Regexp
  license: perl_5
  summary: 'Parse regular expressions'

extra:
  # these store the original arguments conda-skeleton was run with
  cpan_distribution: PPIx::Regexp
  cpan_module: PPIx::Regexp

# See
# https://docs.conda.io/projects/conda-build for
# more information about meta.yaml
